current:
	Some refactoring
	changed tty code to be able to use any psf font (specifically NOT psfu) that is 8x16 (you will have to provide the psf file and rename it to font.psf in the kernel folder)
	changed the linker script to use separate physical and virtual addresses, modified the loader to handle this
prev:
	paused parsing acpi tables (had to properly do interrupts)
	properly implemented gdt and idt
	did a LOT of refactoring (rewrote the kernel makefile to allow for files in subdirectories and files with the same name but different extensions)
	added a hack to the kernel to let me implement interrupts (linker.lds setting the kernel to KERNEL_START instead of relying on the loader to do it (this lets me put the interrupt functions in one big array in assembly), 
		I don't like it but i can't think of a better way right now)
	added a macro to halt the cpu
	moved the liballoc stdlib functions into libk (they just wrap liballoc right now)
	added temporary code to test interrupts (divide by zero at the end of the _start function)
52ab40a:
	Added precision specifier to printf
	started parsing ACPI tables
91affd7:
	NOTE: multiple source files were removed and had to be recreated so previous changelogs may be inaccurate (oopsie :3)
	changed project layout
	added liballoc
	parsed efi memory descriptors into a format easily usable by liballoc
	removed crti,crtn from kernel (will probably add back later but it does not have any real use right now)
	updated tty to clear screen after 25 lines
	recreated loader in posix-uefi (it was easier than modifying an existing loader to pass the information for the kernel)
	rewrote gdt and idt
	remapped kernel to use the same address space as the linux kernel
	paging now works correctly (deferencing virtual addresses now actually returns correct information instead of page faulting)
7413cd4:
	even more refactoring
	moved cpio parsing to separate file
	added strncmp
	increased memory allocated to initfs for future use (8KB to 1MB)
	added separate archive list for cpio (easier to add new files)
	updated makefile to not clean initfs and added it to .PHONY to force it to get rebuilt each time (easier for git)
c3176f9:
	changed clang format
	made clang format ignore posix-uefi
	created basic libc + printf
	passed uefi memory map to kernel
	refactored code
	added crt{i,n}.s
	removed posix-uefi from repository

993ffe8:
	added compile_commands and .clang-format
	Fixed apply.sh to correctly use QEMU_DEBUG flag ONLY when running on qemu (wildly sending bytes to a theoretical serial port is NOT a good idea)
	Manually specified qemu ram size (it was causing a weird issue with allocations)
		trying to store a large array on the stack causes the entire emulator to crash regardless of ram size
		malloc calls also crashed with anything less than 2G ram
	Switched back to custom elf loader using posix uefi
		Previous issues with kernel not loading were due to not specifying SYSV_ABI for the entry point
		The loader from the previous commit had issues with executables that were linked from more than one object file (probably due to the old kernel CFLAGS(see below))
	Changed kernel CFLAGS to include -fpie, -fpic, and --static and removed -mcmodel=large
		-mcmodel=large causes the kernel to require relocations and I have not added those to the loader
		-fpic and -fpie make the kernel easier to load into memory
		--static removes dynamic headers, making the loader simpler since I don't need to do ANY relocations (so far)
	Using AllocatePool instead of AllocatePages to test an error with program headers not getting moved to the correct memory addresses
	Added proper test loader and program
		the test loader should be as identical as possible to the actual loader
			only difference being mmap calls that I can't use in UEFI and stack arrays in the test loader vs heap arrays in the actual loader
